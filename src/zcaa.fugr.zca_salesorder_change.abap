FUNCTION ZCA_SALESORDER_CHANGE.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(I_VBELN) TYPE  VBELN_VA
*"     VALUE(I_DLVBLK) TYPE  LIFSK OPTIONAL
*"     VALUE(I_REJECT) TYPE  ABGRU OPTIONAL
*"     VALUE(I_ORDER_HEADER_IN) TYPE  BAPISDH1 OPTIONAL
*"     VALUE(I_ORDER_HEADER_INX) TYPE  BAPISDH1X OPTIONAL
*"     VALUE(IT_ORDERITEMS) TYPE  ZCA_IN_SALESORDER_TT OPTIONAL
*"  EXPORTING
*"     VALUE(E_MESSAGE) TYPE  BAPI_MSG
*"     VALUE(E_ERROR) TYPE  BAPI_MSG
*"  TABLES
*"      T_RETURN STRUCTURE  BAPIRET2 OPTIONAL
*"      T_ORDER_ITEMS_IN STRUCTURE  BAPISDITM OPTIONAL
*"      T_ORDER_SCHEDULES_IN STRUCTURE  BAPISCHDL OPTIONAL
*"      T_ORDER_ITEMS_INX STRUCTURE  BAPISDITMX OPTIONAL
*"      T_ORDER_SCHEDULES_INX STRUCTURE  BAPISCHDLX OPTIONAL
*"----------------------------------------------------------------------


  DATA:
        "Header Data
        W_ORDER_HEADER_IN  TYPE  BAPISDH1,
        W_ORDER_HEADER_INX TYPE  BAPISDH1X,
        W_RETURN           TYPE BAPIRET2,

        WA_ORDERITEMS      TYPE ZCA_IN_SALESORDER_WA,

        "Material Data

        W_ORDER_ITEMS_IN   TYPE  BAPISDITM,
        W_ORDER_ITEMS_INX  TYPE BAPISDITMX,

        "Scheduling Data
        W_SCHEDULES_IN     TYPE BAPISCHDL,
        W_SCHEDULES_INX    TYPE BAPISCHDLX,

        "Exception & Temp Data
        L_COUNT            TYPE syst_fmkey,
        L_POSNR            TYPE POSNR_VA VALUE '0',
        L_CITMNUM          TYPE CHAR6
        .


  CLEAR: W_ORDER_HEADER_IN, W_ORDER_HEADER_INX,
         W_ORDER_ITEMS_IN, W_ORDER_ITEMS_INX,
         W_SCHEDULES_IN, W_SCHEDULES_INX.


  REFRESH: T_ORDER_ITEMS_IN[],      T_ORDER_ITEMS_INX[],
           T_ORDER_SCHEDULES_IN[],  T_ORDER_SCHEDULES_INX[],
           T_RETURN[].



  "Company Code
IF I_DLVBLK = 'X'.
    I_ORDER_HEADER_IN-DLV_BLOCK = ''.
    I_ORDER_HEADER_INX-DLV_BLOCK = 'X'.
ELSE.
    I_ORDER_HEADER_IN-DLV_BLOCK = 'ZA'.
    I_ORDER_HEADER_INX-DLV_BLOCK = 'X'.
ENDIF.


*"    IF I_REQDAT IS NOT INITIAL.
*"       W_ORDER_HEADER_IN-REQ_DATE_H = I_REQDAT.
*"       W_ORDER_HEADER_INX-REQ_DATE_H = 'X'.
*"    ENDIF.


    I_ORDER_HEADER_INX-UPDATEFLAG = 'U'.


"REJECT 승인 거부할 시
IF I_REJECT = 'X' OR I_REJECT IS NOT INITIAL.

  IF I_REJECT = 'X'.
  I_REJECT = 'A0'.
  ENDIF.

  LOOP AT IT_ORDERITEMS INTO WA_ORDERITEMS.

        L_CITMNUM = WA_ORDERITEMS-ITM_NUMBER.
        W_ORDER_ITEMS_IN-ITM_NUMBER   = WA_ORDERITEMS-ITM_NUMBER.                  "'000010'.
        W_ORDER_ITEMS_INX-ITM_NUMBER  = WA_ORDERITEMS-ITM_NUMBER.
        W_ORDER_ITEMS_IN-PO_ITM_NO    = WA_ORDERITEMS-ITM_NUMBER.
        W_ORDER_ITEMS_INX-PO_ITM_NO    = 'X'.

        W_ORDER_ITEMS_IN-REASON_REJ = I_REJECT.
        W_ORDER_ITEMS_INX-REASON_REJ = 'X'.

        W_ORDER_ITEMS_INX-UPDATEFLAG  = 'U'.

        APPEND W_ORDER_ITEMS_IN TO T_ORDER_ITEMS_IN.
        APPEND W_ORDER_ITEMS_INX TO T_ORDER_ITEMS_INX.
        CLEAR: W_ORDER_ITEMS_IN, W_ORDER_ITEMS_INX.
  ENDLOOP.
ENDIF.



"승인 또는 거부를 받기 전 이거나 승인을 할 때는 수행하지 않음
IF IT_ORDERITEMS IS NOT INITIAL AND I_ORDER_HEADER_IN-DLV_BLOCK = 'ZA'
                                AND I_DLVBLK IS INITIAL
                                AND I_REJECT IS INITIAL
                                .

    DATA: W_VBAP             TYPE VBAP,
          L_REQDLVDATE       TYPE EDATU,
          L_MATNR            TYPE MATNR.


    LOOP AT IT_ORDERITEMS INTO WA_ORDERITEMS.



        L_CITMNUM = WA_ORDERITEMS-ITM_NUMBER.
        W_ORDER_ITEMS_IN-ITM_NUMBER   = WA_ORDERITEMS-ITM_NUMBER.                  "'000010'.
        W_ORDER_ITEMS_INX-ITM_NUMBER  = WA_ORDERITEMS-ITM_NUMBER.

        W_ORDER_ITEMS_IN-PO_ITM_NO    = WA_ORDERITEMS-ITM_NUMBER.
        W_ORDER_ITEMS_INX-PO_ITM_NO    = 'X'.


        W_SCHEDULES_IN-ITM_NUMBER     = WA_ORDERITEMS-ITM_NUMBER.                  "'000010'.
        W_SCHEDULES_INX-ITM_NUMBER    = WA_ORDERITEMS-ITM_NUMBER.

        W_SCHEDULES_IN-SCHED_LINE     = '0001'.
        W_SCHEDULES_INX-SCHED_LINE    = '0001'.

        SELECT SINGLE * FROM VBAP INTO W_VBAP
                                  WHERE VBELN LIKE  I_VBELN
                                  AND POSNR   LIKE  L_CITMNUM
        .

        IF WA_ORDERITEMS-MATERIAL IS NOT INITIAL.
          W_SCHEDULES_INX-UPDATEFLAG    = 'I'.
          W_ORDER_ITEMS_INX-UPDATEFLAG = 'I'.

        ELSEIF W_VBAP-MATNR IS NOT INITIAL AND WA_ORDERITEMS-MATERIAL IS NOT INITIAL.
          W_ORDER_ITEMS_INX-UPDATEFLAG  = 'I'.
          W_SCHEDULES_INX-UPDATEFLAG    = 'I'.

        ELSEIF WA_ORDERITEMS-MATERIAL IS INITIAL AND WA_ORDERITEMS-REQ_QTY IS INITIAL.
          W_ORDER_ITEMS_INX-UPDATEFLAG  = 'D'.
          W_SCHEDULES_INX-UPDATEFLAG    = 'D'.

          CLEAR: W_VBAP.
          APPEND W_ORDER_ITEMS_IN TO T_ORDER_ITEMS_IN.
          APPEND W_ORDER_ITEMS_INX TO T_ORDER_ITEMS_INX.
          CLEAR: W_ORDER_ITEMS_IN, W_ORDER_ITEMS_INX.


          APPEND W_SCHEDULES_IN TO T_ORDER_SCHEDULES_IN.
          APPEND W_SCHEDULES_INX TO T_ORDER_SCHEDULES_INX.
          CLEAR: W_SCHEDULES_IN, W_SCHEDULES_INX.
          CONTINUE.
        ENDIF.

        CLEAR: W_VBAP.

        SELECT SINGLE REQ_DLVDATE FROM VBEP INTO L_REQDLVDATE
                                  WHERE VBELN   LIKE  I_VBELN
                                  AND   POSNR   LIKE  L_CITMNUM
                                  AND   ETENR   = 1.


*"        IF I_REQDAT IS NOT INITIAL.
*"          W_SCHEDULES_IN-REQ_DATE = I_REQDAT.
*"          W_SCHEDULES_INX-REQ_DATE = 'X'.
*"        ELSE.
          W_SCHEDULES_IN-REQ_DATE   =   L_REQDLVDATE.
          W_SCHEDULES_INX-REQ_DATE = 'X'.
*"        ENDIF.


        CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
          EXPORTING
            INPUT  = WA_ORDERITEMS-MATERIAL
          IMPORTING
            OUTPUT = L_MATNR.

        W_ORDER_ITEMS_IN-MATERIAL   = WA_ORDERITEMS-MATERIAL.      "'ZCA-F01'.
        W_ORDER_ITEMS_INX-MATERIAL = 'X'.

        IF WA_ORDERITEMS-REQ_QTY IS INITIAL.
          WA_ORDERITEMS-REQ_QTY = 1.
        ENDIF.

        W_SCHEDULES_IN-REQ_QTY      = WA_ORDERITEMS-REQ_QTY.    "Quantity
        W_SCHEDULES_INX-REQ_QTY     = 'X'.

        W_ORDER_ITEMS_IN-TARGET_QTY = WA_ORDERITEMS-REQ_QTY.
        W_ORDER_ITEMS_INX-TARGET_QTY = 'X'.

        W_ORDER_ITEMS_IN-TARGET_QU = 'EA'.
        W_ORDER_ITEMS_INX-TARGET_QU = 'X'.

        W_ORDER_ITEMS_IN-PLANT      = 'A001'. "WA_ORDERITEMS-PLANT.      "Plant
        W_ORDER_ITEMS_INX-PLANT     = 'X'.

        W_ORDER_ITEMS_IN-STORE_LOC  = 'ZCA'.  "WA_ORDERITEMS-STORE_LOC.  "Storage Location
        W_ORDER_ITEMS_INX-STORE_LOC = 'X'.



        APPEND W_ORDER_ITEMS_IN TO T_ORDER_ITEMS_IN.
        APPEND W_ORDER_ITEMS_INX TO T_ORDER_ITEMS_INX.
        CLEAR: W_ORDER_ITEMS_IN, W_ORDER_ITEMS_INX.


        APPEND W_SCHEDULES_IN TO T_ORDER_SCHEDULES_IN.
        APPEND W_SCHEDULES_INX TO T_ORDER_SCHEDULES_INX.
        CLEAR: W_SCHEDULES_IN, W_SCHEDULES_INX.
    ENDLOOP.
ENDIF.








CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
  EXPORTING
    SALESDOCUMENT               =   I_VBELN
    ORDER_HEADER_IN             =   I_ORDER_HEADER_IN
    ORDER_HEADER_INX            =   I_ORDER_HEADER_INX

  TABLES
   RETURN                       =   T_RETURN
   ORDER_ITEM_IN                =   T_ORDER_ITEMS_IN
   ORDER_ITEM_INX               =   T_ORDER_ITEMS_INX
   SCHEDULE_LINES               =   T_ORDER_SCHEDULES_IN
   SCHEDULE_LINESX              =   T_ORDER_SCHEDULES_INX
          .








  IF I_VBELN IS NOT INITIAL AND SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
    SHIFT I_VBELN LEFT DELETING LEADING '0'.
    CONCATENATE 'Sales Order(판매오더)' I_VBELN 'has been changed(변경성공) !' INTO E_MESSAGE
    SEPARATED BY SPACE.
  ELSE.
    LOOP AT T_RETURN INTO W_RETURN.
      L_COUNT = L_COUNT + 1.
      CONDENSE L_COUNT.
      CONCATENATE E_ERROR L_COUNT '.' W_RETURN-MESSAGE ';' INTO E_ERROR.
    ENDLOOP.
  ENDIF.

ENDFUNCTION.
